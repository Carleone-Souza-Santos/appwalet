"use client";

import React from "react";
import { AuthProvider, useAuth } from "@/contexts/AuthContext"; // Importa o contexto de autentica√ß√£o e o hook de acesso
import CircularLoader from "@/components/CircularLoader";       // Componente de carregamento (spinner)
import Header from "@/components/Header";                       // Componente do cabe√ßalho da aplica√ß√£o

// ==============================
// üß© Tipagem das propriedades
// ==============================
// Define que o componente receber√° elementos filhos (children)
// ‚Äî ou seja, o conte√∫do interno que ser√° renderizado dentro do wrapper.
interface Props {
  children: React.ReactNode;
}

// ==============================
// üåê ClientWrapper
// ==============================
// Este componente √© o ponto de entrada principal da camada de cliente ("use client").
// Ele envolve toda a aplica√ß√£o com o `AuthProvider`, garantindo que
// o estado de autentica√ß√£o esteja acess√≠vel a todos os componentes filhos.
export default function ClientWrapper({ children }: Props) {
  return (
    // O `AuthProvider` disponibiliza o contexto de autentica√ß√£o para toda a √°rvore de componentes.
    <AuthProvider>
      {/* O conte√∫do interno √© delegado ao `InnerClientWrapper`, 
          que decide o que exibir com base no estado de autentica√ß√£o */}
      <InnerClientWrapper>{children}</InnerClientWrapper>
    </AuthProvider>
  );
}

// ==============================
// üîê InnerClientWrapper
// ==============================
// Este componente √© respons√°vel por controlar a renderiza√ß√£o condicional
// com base no estado de autentica√ß√£o do usu√°rio.
function InnerClientWrapper({ children }: Props) {
  // Obt√©m o estado atual de autentica√ß√£o atrav√©s do contexto
  const { user, loading } = useAuth();

  // Enquanto o Firebase verifica o status do usu√°rio (login autom√°tico, token, etc.),
  // exibe o componente de carregamento circular para evitar piscar telas indevidas.
  if (loading) return <CircularLoader />;

  // Quando o estado de autentica√ß√£o termina de carregar:
  // - Exibe o cabe√ßalho fixo no topo da p√°gina
  // - Renderiza o conte√∫do principal da aplica√ß√£o (children)
  return (
    <>
      <Header /> {/* Cabe√ßalho global vis√≠vel em todas as p√°ginas autenticadas */}
      {children} {/* Conte√∫do principal renderizado ap√≥s autentica√ß√£o */}
    </>
  );
}
